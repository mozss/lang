#!/bin/sh

:<<EOF
  定义：可以function fun（）定义; 也可用fun()定义,不带任何参数
  返回值: 可以显示加return返回; 如不加,将以最后一条命名运行结果,作为返回值。

EOF

demoFun(){
  echo "这是一个shell函数"
}

echo "--------函数开始执行---------"
demoFun
echo "--------函数执行完毕---------"


#一个带有return语句的函数
funWithReturn(){
  echo "这个函数会对输入的两个数字进行相加运算"
  echo "输入第一个数字:"
  read aNumb
  echo "输入第二个数字:"
  read bNumb
  echo "这两个数字为 $aNumb 和 $bNumb"
  return $(( $aNumb + $bNumb ))
}

funWithReturn
# 返回值通过$?来获取
echo "输入的两个数字的和为 $?"
# 注意, 函数需要写到前面, 调用的语句写到后面


#函数参数
#函数体内,通过$n的形式来获取参数的值,例如$1表示第一个参数,$2表示第二个参数...
#例子:
functionParam(){
  echo "第一个参数为 $1"
  echo "第二个参数为 $2"
}

functionParam 23 9900
#上面执行输出: 第一个参数为22 第二个参数为9900
# 当参数的个数超过10个(含), 不能用$n获取参数, 需要使用${n}
# 此外还需要注意的几个特殊字符:
# $# 传递到脚本或函数的参数个数
# $* 以一个单字符串显示所有向脚本传递的参数
# $$ 脚本运行的当前进程ID号
# $! 后台运行的最后一个进程的ID号
# $@ 与$*相同,但是使用时加引号,并在引号中返回每个参数
# $- 显示Shell使用的当前选项, 与set命令功能相同
# $? 显示最后命令的退出状态 0表示没有错误（其他值表示有错误）









